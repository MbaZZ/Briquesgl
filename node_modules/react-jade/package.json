{
  "name": "react-jade",
  "version": "2.5.0",
  "description": "Compile Jade to React JavaScript",
  "keywords": [],
  "dependencies": {
    "acorn": "^1.1.0",
    "constantinople": "^3.0.1",
    "ent": "^2.2.0",
    "jade": "1.9.2",
    "js-stringify": "^1.0.1",
    "resolve": "^1.1.6",
    "static-module": "^1.1.2",
    "uglify-js": "^2.4.21",
    "with": "^5.0.0"
  },
  "devDependencies": {
    "es6ify": "^1.6.0",
    "gethub": "^2.0.1",
    "htmlparser2": "^3.8.2",
    "istanbul": "^0.3.14",
    "marked": "^0.3.3",
    "react": "^0.14.0",
    "react-dom": "^0.14.0",
    "rimraf": "^2.3.3",
    "testit": "^2.0.2",
    "unescape-html": "^1.0.0"
  },
  "peerDependencies": {
    "react": ">=0.12.0 <0.15.0"
  },
  "scripts": {
    "test": "node test/download-jade-tests.js && node test/index.js && npm run coverage",
    "coverage": "istanbul cover test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jadejs/react-jade.git"
  },
  "author": {
    "name": "ForbesLindesay"
  },
  "license": "MIT",
  "readme": "# react-jade\n\nCompile Jade to React JavaScript\n\n[![Build Status](https://img.shields.io/travis/jadejs/react-jade/master.svg)](https://travis-ci.org/jadejs/react-jade)\n[![Dependency Status](https://img.shields.io/gemnasium/jadejs/react-jade.svg)](https://gemnasium.com/jadejs/react-jade)\n[![NPM version](https://img.shields.io/npm/v/react-jade.svg)](https://www.npmjs.org/package/react-jade)\n\n## Installation\n\n    npm install react-jade\n\n## Usage\n\n### With Browserify\n\nIf you are using browserify, just write a file that looks like the following, then use `react-jade` as a transform.  It will then inline the result of calling `jade.compileFile` automatically.\n\n```js\nvar React = require('react');\nvar jade = require('react-jade');\n\nvar template = jade.compileFile(__dirname + '/template.jade');\n\nReact.render(template({local: 'values'}), document.getElementById('container'));\n```\n\n```\nbrowserify index.js --transform react-jade > bundle.js\n```\n\n### Without Browserify\n\nIf you are not using browserify, you could manually compile the jade to some client file.  e.g.\n\n```js\nvar fs = require('fs');\nvar jade = require('react-jade');\n\nfs.writeFileSync(__dirname + '/template.js', 'var template = ' + jade.compileFileClient(__dirname + '/template.jade'));\n```\n\nThen on your html page:\n\n```html\n<div id=\"container\"></div>\n<script src=\"http://fb.me/react-0.12.2.js\"></script>\n<script src=\"template.js\"></script>\n<script>\n  React.render(template({local: 'values'}), document.getElementById('container'));\n</script>\n```\n\n### Server Side\n\nYou can also use react-jade to render templates on the server side via `React.renderToString`.  This is especially useful for building isomorphic applications (i.e. applications that run the same on the server side and client side).\n\n```js\nvar fs = require('fs');\nvar React = require('react');\nvar jade = require('react-jade');\n\nvar template = jade.compileFile(__dirname + '/template.jade');\n\nvar html = React.renderToString(template({local: 'values'}));\nfs.writeFileSync(__dirname + '/template.html', html);\n```\n\n### ES6\n\nIf you are using ES6 server side, or the browserify transform client side (even without any other ES6 support), you can use Tagged Literals to embed your jade code directly within your JavaScript components:\n\n```js\nvar TodoList = React.createClass({\n  render: jade`\nul\n  each item in this.props.items\n    li= item\n`\n});\nvar TodoApp = React.createClass({\n  getInitialState: function() {\n    return {items: [], text: ''};\n  },\n  onChange: function(e) {\n    this.setState({text: e.target.value});\n  },\n  handleSubmit: function(e) {\n    e.preventDefault();\n    var nextItems = this.state.items.concat([this.state.text]);\n    var nextText = '';\n    this.setState({items: nextItems, text: nextText});\n  },\n  render: jade`\nh3 TODO\nTodoList(items=this.state.items)\nform(onSubmit=this.handleSubmit)\n  input(onChange=this.onChange value=this.state.text)\n  button= 'Add #' + (this.state.items.length + 1)\n`.locals({TodoList: TodoList})\n});\nReact.render(TodoApp(), mountNode);\n```\n\n## API\n\n```js\nvar jade = require('react-jade');\n```\n\n### jade(options) / jade(file)\n\nActs as a browserify transform to inline calls to `jade.compileFile`.  The source code looks something like:\n\n```js\nfunction browserify(options) {\n  function transform(file) {\n    return new TransformStream(); //stream to do the transform implemented here\n  }\n  if (typeof options === 'string') {\n    var file = options;\n    options = arguments[2] || {};\n    return transform(file);\n  } else {\n    return transform;\n  }\n}\n```\n\n### jade.compileFile(filename, options) => fn\n\nCompile a jade file into a function that takes locals and returns a React DOM node.\n\n### jade.compileFileClient(filename, options)\n\nCompile a jade file into the source code for a function that takes locals and returns a React DOM node.  The result requires either a global 'React' variable, or the ability to require 'React' as a CommonJS module.\n\n### jade.compile(jadeString, options) => fn\n\nSame as `jade.compileFile` except you pass an inline jade string instead of a filename. You should set `options.filename` manually.\n\n### jade.compileClient(jadeString, options)\n\nSame as `jade.compileFileClient` except you pass an inline jade string instead of a filename. You should set `options.filename` manually.\n\n### template.locals(locals)\n\nYou can set default `locals` values via the `template.locals` api.  e.g.\n\n```js\nvar React = require('react');\nvar jade = require('react-jade');\n\nvar template = jade.compileFile(__dirname + '/template.jade').locals({title: 'React Jade'});\n\nReact.render(template({local: 'values'}), document.getElementById('container'));\n```\n\n## Differences from jade\n\nReact Jade has a few bonus features, that are not part of Jade.\n\n### Automatic partial application of `on` functions\n\nIn react, you add event listeners by setting attributes, e.g. `onClick`.  For example:\n\n```jade\nbutton(onClick=clicked) Click Me!\n```\n```js\nvar fn = jade.compileFile('template.jade');\nReact.render(fn({clicked: function () { alert('clicked'); }), container);\n```\n\nOften, you may want to partially apply a function, e.g.\n\n```jade\ninput(value=view.text onChange=view.setProperty.bind(view, 'text'))\n```\n```js\nfunction View() {\n}\nView.prototype.setProperty = function (name, e) {\n  this[name] = e.target.value;\n  render();\n};\nvar view = new View();\nfunction render() {\n  React.renderComponent(fn({view: view}), container);\n}\n```\n\nBecause you so often want that `.bind` syntax, and it gets pretty long and cumbersome to write, react-jade lets you omit it:\n\n```jade\ninput(value=view.text onChange=view.setProperty('text'))\n```\n\nThis is then automatically re-written to do the `.bind` for you.\n\n### Style\n\nIn keeping with React, the style attribute should be an object, not a string.  e.g.\n\n```jade\ndiv(style={background: 'blue'})\n```\n\n### valueLink\n\nThe `valueLink` property supports two way binding to `this.state.name` by default.  e.g.\n\n```jade\ninput(valueLink=this.state.name)\n```\n\nis eqivalent to:\n\n```jade\ninput(valueLink={value: this.state.name,requestChange:function(v){ this.setState({name:v})}.bind(this)})\n```\n\nThis makes building simple forms where each input should use a property of the state very easy.\n\n### Unsupported Features\n\nAlthough a lot of jade just works, there are still some features that have yet to be implemented. Here is a list of known missing features, in order of priority for adding them. Pull requests welcome:\n\n - mixins\n - attribute extension/merging (via `&attributes`)\n - case/when\n - using each to iterate over keys of an object (rather than over items in an array)\n - interpolation\n - attribute interpollation\n - special handling of data-attributes\n - outputting unescaped html results in an extra wrapper div and doesn't work for attributes\n\n## License\n\n  MIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jadejs/react-jade/issues"
  },
  "_id": "react-jade@2.5.0",
  "_from": "react-jade@>= 0.0.1"
}
